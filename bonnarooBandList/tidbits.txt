imports:
import pandas as pd
from pandas import Series, DataFrame

loading json file:
path = 'tweetCollection.json'
record=[json.loads(line) for line in open(path)]

getting into pandas:
frame=DataFrame(record)

to get the time into a nice format:

frame['created_at']=[tweetTime['$date'] for tweetTime in frame['created_at']]

frame['created_at']=pd.to_datetime(Series(frame['created_at']))

can do the same thing for the ids:

frame['_id']=[ids['$oid'] for ids in frame['_id']]

setting index:

timeframe=frame.set_index('created_at',drop=False)
timeframe.index=timeframe.index.tz_localize('UTC').tz_convert('EST')

plotting:

timeframe.plot(style='g')
plt.xlabel('Day',fontsize=30)
plt.ylabel...
plt.grid(b=None)

timeseries tricks:
after setting created_at as the index, get tweet text within a time range:
timeframe.text.between_time(startString,stopString)

Remove retweets:
nort = timeframe[~timeframe['text'].str.startswith('RT')]

Find band popularity:
 for band in bands:
    try:
        bandPop[band]=nort['text'].str.contains(band).value_counts()[1]
    except:
        bandPop[band]=0

for getting the xaxis right on plotting dates and times:
from matplotlib import dates
import datetime

fig, ax = subplots() # initialize figure
# set to label every 4 hours
ax.xaxis.set_major_locator(dates.HourLocator(byhour=np.linspace(0,24,4)))
hfmt = dates.DateFormatter('%m/%d %H:%M')

for finding if band aliases are in tweet text:
alias.issubset(set(text.split()))

##############################################

for making the band popularity histogram

fig, ax = plt.subplots()

# Make tick labels larger, different font, rotate x-labels
plt.setp(ax.get_xticklabels(), fontsize=12, rotation=45, horizontalalignment='right', family='sans-serif')
plt.setp(ax.get_yticklabels(), fontsize=12, family='sans-serif')

# Larger axis labels.
ax.set_xlabel('Band',fontsize=25,family='sans-serif')
ax.set_ylabel('Counts',fontsize=25,family='sans-serif')

# Get rid of ugly grid.
ax.grid(b=False)
ax.patch.set_facecolor('white')

# Makes full figure (including labels) fit within window
plt.tight_layout()